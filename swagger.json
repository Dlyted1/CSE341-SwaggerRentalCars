{
  "swagger": "2.0",
  "info": {
    "title": "Swagger Rental Cars API",
    "description": "Swagger Rental Cars API",
    "version": "1.0.0"
  },
  "host": [
    "localhost:8080",
    "cse341-swaggerrentalcars.onrender.com"
  ],
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/login": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/logout": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api-docs": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/cars/": {
      "get": {
        "tags": [
          "cars"
        ],
        "description": "Returns all cars in the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "cars"
        ],
        "description": "Create a car in the database, every field is required. The car ID number is automatically assigned by the database after submition.\r  Any field that is ommitted will be set to \"NULL\"",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "carMake": {
                  "example": "any"
                },
                "carModel": {
                  "example": "any"
                },
                "carYear": {
                  "example": "any"
                },
                "carTag": {
                  "example": "any"
                },
                "carStatus": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "tags": [
          "cars"
        ],
        "description": "Returns a car from the database using the cars ID number",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "cars"
        ],
        "description": "Update a car in the database, every field is required. Any field that is ommitted will be set to \"NULL\"",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "carMake": {
                  "example": "any"
                },
                "carModel": {
                  "example": "any"
                },
                "carYear": {
                  "example": "any"
                },
                "carTag": {
                  "example": "any"
                },
                "carStatus": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "cars"
        ],
        "description": "Delete a car in the database.;",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/cars/{status}": {
      "get": {
        "tags": [
          "cars"
        ],
        "description": "Returns a car from the database using the cars tag number",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/cars/{tag}": {
      "get": {
        "tags": [
          "cars"
        ],
        "description": "Returns a car from the database using the cars tag number",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employees/": {
      "get": {
        "tags": [
          "employees"
        ],
        "description": "Returns all employees in the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "employees"
        ],
        "description": "Create an employee in the database, every field is required. The employee ID number is automatically assigned by the database after submition.\r  Any field that is ommitted will be set to \"NULL\"",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "empFName": {
                  "example": "any"
                },
                "empLName": {
                  "example": "any"
                },
                "empEmail": {
                  "example": "any"
                },
                "empPhone": {
                  "example": "any"
                },
                "empAddress": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/employees/{id}": {
      "get": {
        "tags": [
          "employees"
        ],
        "description": "Returns a employee from the database using the employees ID number",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "employees"
        ],
        "description": "Update an employee in the database, every field is required. Any field that is ommitted will be set to \"NULL\"",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "empFName": {
                  "example": "any"
                },
                "empLName": {
                  "example": "any"
                },
                "empEmail": {
                  "example": "any"
                },
                "empPhone": {
                  "example": "any"
                },
                "empAddress": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "employees"
        ],
        "description": "Delete an employee in the database;",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/employees/login": {
      "post": {
        "tags": [
          "employees"
        ],
        "description": "Employee Login to database, every field is required. Any field that is ommitted will be set to \"NULL\"",
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/employees/logout": {
      "post": {
        "tags": [
          "employees"
        ],
        "description": "Employee logout from database, every field is required. Any field that is ommitted will be set to \"NULL\"",
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/renters/": {
      "get": {
        "tags": [
          "renters"
        ],
        "description": "Returns all renters in the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "renters"
        ],
        "description": "Create a renter in the database, every field is required. The renter ID number is automatically assigned by the database after submition.\r  Any field that is ommitted will be set to \"NULL\"",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "renterFName": {
                  "example": "any"
                },
                "renterLName": {
                  "example": "any"
                },
                "renterEmail": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/renters/{id}": {
      "get": {
        "tags": [
          "renters"
        ],
        "description": "Returns a Renters from the database using the renters ID number",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "renters"
        ],
        "description": "Update a renter in the database, every field is required. Any field that is ommitted will be set to \"NULL\"",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "renterFName": {
                  "example": "any"
                },
                "renterLName": {
                  "example": "any"
                },
                "renterEmail": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "renters"
        ],
        "description": "Delete a renter from the database.;",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/rentals/": {
      "get": {
        "tags": [
          "rentals"
        ],
        "description": "Returns all rentals in the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "rentals"
        ],
        "description": "Create a rental in the database, every field is required. The renter ID number is automatically assigned by the database after submition if \r  it doesn",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rentals/{id}": {
      "get": {
        "tags": [
          "rentals"
        ],
        "description": "Returns Rentals from the database using the renter ID number",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "rentals"
        ],
        "description": "Update a rental in the database, every field is required. Renter ID is used to update the rental information Any field that is ommitted will be set to \"NULL\"",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "renterRentals": {
                  "example": "any"
                },
                "renterDate": {
                  "example": "any"
                },
                "renterDateOfReturn": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "rentals"
        ],
        "description": "Delete a rental from the database. Insert a valid Renter ID to delete a rental from the database;",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/stores/": {
      "get": {
        "tags": [
          "stores"
        ],
        "description": "Returns all stores in the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "stores"
        ],
        "description": "Create a store in the database, every field is required. The store ID number is automatically assigned by the database after submition.\r  Any field that is ommitted will be set to \"NULL\"",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "storeName": {
                  "example": "any"
                },
                "storeManager": {
                  "example": "any"
                },
                "storeState": {
                  "example": "any"
                },
                "storePhone": {
                  "example": "any"
                },
                "storeEmail": {
                  "example": "any"
                },
                "storeCapacity": {
                  "example": "any"
                },
                "storeBrandType": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/stores/{id}": {
      "get": {
        "tags": [
          "stores"
        ],
        "description": "Returns a store from the database using the stores ID number",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "stores"
        ],
        "description": "Update a store in the database, every field is required. Any field that is ommitted will be set to \"NULL\"",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "storeName": {
                  "example": "any"
                },
                "storeManager": {
                  "example": "any"
                },
                "storeState": {
                  "example": "any"
                },
                "storePhone": {
                  "example": "any"
                },
                "storeEmail": {
                  "example": "any"
                },
                "storeCapacity": {
                  "example": "any"
                },
                "storeBrandType": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "stores"
        ],
        "description": "Delete a store from the database, every field is required.;",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  }
}